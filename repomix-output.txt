This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-05T11:35:21.190Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
prisma/
  schema.prisma
src/
  app/
    about/
      page.tsx
    events/
      [id]/
        page.tsx
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    events/
      EventCameraButton.tsx
      EventCard.tsx
      EventDetailContent.tsx
      EventDetailMap.tsx
      EventList.tsx
      EventPhotosGallery.tsx
      EventQRCode.tsx
    layout/
      PageLayout.tsx
    Navbar.tsx
.gitignore
db-connect.sh
docker-compose.yml
Dockerfile.dev
Dockerfile.prod
eslint.config.mjs
Makefile
next.config.ts
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json

================================================================
Files
================================================================

================
File: prisma/schema.prisma
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  picture     String?
  address     Json
  startAt     DateTime
  endAt       DateTime
  createdAt   DateTime @default(now())
  photos      Photo[]
}

model Photo {
  id         String   @id @default(uuid())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  url        String
  uploadedAt DateTime @default(now())
}

================
File: src/app/about/page.tsx
================
export default async function AboutPage() {
  
  return (
    <main className="min-h-screen pt-16 pb-12 bg-gray-50 dark:bg-gray-900">      
    </main>
  );
}

================
File: src/app/events/[id]/page.tsx
================
import { Button } from "@heroui/react";

export default function EventDetail() {
  return (
    <div className="min-h-screen bg-white">
      {/* Header Image */}
      <div className="relative">
        {/* Image placeholder */}
        <div className="h-80 bg-primary-100 relative">
          {/* Ici viendra l'image r√©elle */}
          <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent"></div>
        </div>
        
        {/* Back button */}
        <button className="absolute top-4 left-4 bg-white/20 backdrop-blur-sm p-2 rounded-full">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        
        {/* Favorite button */}
        <button className="absolute top-4 right-4 bg-white/20 backdrop-blur-sm p-2 rounded-full">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
          </svg>
        </button>
        
        {/* Event tag */}
        <div className="absolute top-24 left-4 bg-secondary-500 text-white text-xs font-bold px-3 py-1 rounded-md">
          30 APRIL
        </div>
      </div>

      {/* Event Content */}
      <div className="relative -mt-8 bg-white rounded-t-3xl px-4 pt-6">
        <h1 className="text-2xl font-bold mb-2">International Jazz Festival Jakarta 2023</h1>
        
        {/* Date and Time */}
        <div className="flex items-center text-gray-600 text-sm mb-3">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <span>30 - 31 April 2023</span>
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>9pm - 12 pm</span>
        </div>
        
        {/* Location */}
        <div className="flex items-center text-gray-600 text-sm mb-6">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
          </svg>
          <span>TIM Park, Jakarta, Indonesia</span>
        </div>
        
        {/* Description */}
        <div className="mb-6">
          <h2 className="text-lg font-bold mb-2">Description</h2>
          <p className="text-gray-600 text-sm">
            You are responsible for operations, service, or customer support and face challenges trying to communicate complex procedures to a global market effectively.
          </p>
        </div>
        
        {/* Package Section */}
        <div className="mb-6">
          <h2 className="text-lg font-bold mb-4">Package</h2>
          
          {/* Gold Package */}
          <div className="bg-white border border-gray-200 rounded-lg p-4 mb-4 flex justify-between items-center">
            <div className="flex items-center">
              <div className="bg-gray-100 p-2 rounded-full mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-primary-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                </svg>
              </div>
              <div>
                <h3 className="font-bold">Gold Package</h3>
                <p className="text-xs text-gray-500">VIPP Seat, 2 Day Full</p>
              </div>
            </div>
            <div className="text-right">
              <div className="text-xs text-gray-500 line-through">$355</div>
              <div className="font-bold text-primary-500">$235</div>
            </div>
          </div>
          
          {/* Silver Package */}
          <div className="bg-white border border-gray-200 rounded-lg p-4 mb-4 flex justify-between items-center">
            <div className="flex items-center">
              <div className="bg-gray-100 p-2 rounded-full mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                </svg>
              </div>
              <div>
                <h3 className="font-bold">Silver Package</h3>
                <p className="text-xs text-gray-500">Basic Seat, 2 Day Full</p>
              </div>
            </div>
            <div className="text-right">
              <div className="text-xs text-gray-500 line-through">$155</div>
              <div className="font-bold text-primary-500">$135</div>
            </div>
          </div>
        </div>
        
        {/* Book Now Button */}
        <div className="py-4">
          <Button className="w-full py-3 bg-primary-500 hover:bg-primary-600 text-white font-bold rounded-lg">
            Book Now
          </Button>
        </div>
      </div>

      {/* Navigation Bar */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 py-2">
        <div className="flex justify-around items-center">
          <button className="flex flex-col items-center text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
            <span className="text-xs mt-1">Home</span>
          </button>
          
          <button className="flex flex-col items-center text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
            <span className="text-xs mt-1">Menu</span>
          </button>
          
          <button className="flex flex-col items-center text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 01.707-7.07m-.707 7.07l-1.414 1.414M7.05 4.05A9 9 0 0119.95 16.95M7.05 4.05l-1.414 1.414" />
            </svg>
            <span className="text-xs mt-1">Discover</span>
          </button>
          
          <button className="flex flex-col items-center text-primary-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
            <span className="text-xs mt-1">Profile</span>
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/events/page.tsx
================
// src/app/events/page.tsx
import { Suspense } from 'react';
import EventList from '@/components/events/EventList';
import PageLayout from '@/components/layout/PageLayout';

// Type pour les donn√©es d'un √©v√©nement
interface Event {
  id: string;
  name: string;
  description: string;
  picture?: string;
  address: {
    type: string;
    coordinates: [number, number];
  };
  startAt: string;
  endAt: string;
  createdAt: string;
}

// Simuler la r√©cup√©ration des √©v√©nements
async function getEvents(): Promise<Event[]> {
  return [
    {
      id: '1',
      name: "Grand d√©bat politique",
      description: "Rejoignez-nous pour un d√©bat ouvert sur les enjeux politiques actuels. Tous les citoyens sont invit√©s √† participer et √† partager leurs opinions.",
      picture: "/images/event1.jpg",
      address: {
        type: "Point",
        coordinates: [2.3522, 48.8566]
      },
      startAt: "2025-04-15T18:00:00Z",
      endAt: "2025-04-15T21:00:00Z",
      createdAt: "2025-03-01T10:00:00Z"
    },
    {
      id: '2',
      name: "Assembl√©e citoyenne",
      description: "Une assembl√©e citoyenne pour discuter des projets locaux et des initiatives communautaires. Venez partager vos id√©es et contribuer √† l'am√©lioration de notre ville.",
      picture: "/images/event2.jpg",
      address: {
        type: "Point",
        coordinates: [2.3522, 48.8566]
      },
      startAt: "2025-04-20T14:00:00Z",
      endAt: "2025-04-20T17:00:00Z",
      createdAt: "2025-03-05T10:00:00Z"
    },
    {
      id: '3',
      name: "Meeting √©lectoral",
      description: "Venez rencontrer les candidats et d√©couvrir leurs programmes pour les prochaines √©lections. Une occasion unique de poser vos questions directement.",
      picture: "/images/event3.jpg",
      address: {
        type: "Point",
        coordinates: [2.3522, 48.8566]
      },
      startAt: "2025-05-05T19:00:00Z",
      endAt: "2025-05-05T22:00:00Z",
      createdAt: "2025-03-10T10:00:00Z"
    },
    {
      id: '4',
      name: "Forum de discussion politique",
      description: "Un forum ouvert pour discuter des enjeux politiques actuels avec des experts et des analystes. Une opportunit√© d'approfondir vos connaissances.",
      picture: "/images/event4.jpg",
      address: {
        type: "Point",
        coordinates: [2.3522, 48.8566]
      },
      startAt: "2025-05-12T16:00:00Z",
      endAt: "2025-05-12T19:00:00Z",
      createdAt: "2025-03-15T10:00:00Z"
    },
    {
      id: '5',
      name: "Conf√©rence sur les politiques environnementales",
      description: "Une conf√©rence d√©di√©e aux politiques environnementales et aux actions pour lutter contre le changement climatique. Des intervenants de premier plan seront pr√©sents.",
      picture: "/images/event5.jpg",
      address: {
        type: "Point",
        coordinates: [2.3522, 48.8566]
      },
      startAt: "2025-05-18T10:00:00Z",
      endAt: "2025-05-18T16:00:00Z",
      createdAt: "2025-03-20T10:00:00Z"
    },
    {
      id: '6',
      name: "D√©bat sur l'√©conomie et l'emploi",
      description: "Un d√©bat sur les politiques √©conomiques et les strat√©gies pour favoriser l'emploi. Des perspectives diverses seront pr√©sent√©es par des experts reconnus.",
      picture: "/images/event6.jpg",
      address: {
        type: "Point",
        coordinates: [2.3522, 48.8566]
      },
      startAt: "2025-05-25T18:30:00Z",
      endAt: "2025-05-25T21:30:00Z",
      createdAt: "2025-03-25T10:00:00Z"
    }
  ];
}

export default async function EventsPage() {
  const events = await getEvents();
  
  return (
    <PageLayout 
      title="√âv√©nements"
      showBackButton={true}
      className="bg-gray-50 dark:bg-gray-900"
    >
      <div className="pt-4 pb-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="bg-white dark:bg-gray-800 shadow-sm rounded-lg overflow-hidden">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700">
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">D√©couvrez les √©v√©nements</h1>
              <p className="mt-2 text-gray-600 dark:text-gray-300">
                Parcourez les √©v√©nements politiques √† venir, assistez-y et partagez vos photos.
              </p>
            </div>
            <Suspense fallback={<div className="p-8 text-center">Chargement des √©v√©nements...</div>}>
              <EventList events={events} />
            </Suspense>
          </div>
        </div>
      </div>
    </PageLayout>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

body {
  font-family: var(--font-sans), sans-serif;
}

/* Optional: Add some global styles that match your political event theme */
.event-card {
  @apply bg-primary-50 text-primary-900 rounded-lg shadow-md;
}

.event-button {
  @apply bg-primary-600 text-white hover:bg-primary-700 transition-colors;
}

================
File: src/app/layout.tsx
================
// src/app/layout.tsx
import "./globals.css";
import type { Metadata } from "next";
import { HeroUIProvider } from "@heroui/react";
import { Suspense } from "react";

export const metadata: Metadata = {
  title: "Eventrue - Public Event Photo Sharing",
  description: "Capture et partage de photos lors d'√©v√©nements politiques",
  keywords: "√©v√©nements politiques, partage de photos, d√©bats politiques, meetings politiques",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="fr" className="light crowd-gather-theme">
      <body className={`min-h-screen `}>
        <Suspense>
          <HeroUIProvider>{children}</HeroUIProvider>
        </Suspense>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import { Input } from "@heroui/react";

export default function Home() {
  return (
    <div className="min-h-screen bg-gray-100">
      {/* Barre de recherche */}
      <div className="max-w-md mx-auto pt-4 px-4">
        <div className="relative">
          <Input 
            type="text" 
            placeholder="Search Event" 
            className="w-full pl-4 pr-10 py-2 rounded-full"
          />
          <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
            </svg>
          </div>
        </div>
      </div>

      {/* Section Event for you */}
      <div className="mt-6 px-4">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-bold">Event for you</h2>
          <button className="text-sm text-primary-500">See More</button>
        </div>

        <div className="grid grid-cols-2 gap-4">
          {/* Event Card 1 */}
          <div className="bg-white rounded-lg overflow-hidden shadow">
            <div className="relative">
              <div className="aspect-[4/3] bg-gray-200"></div>
              <button className="absolute top-2 right-2 bg-white p-1 rounded-full">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
              </button>
            </div>
            <div className="p-3">
              <h3 className="font-semibold text-sm mb-1">Food Festival Years Indo</h3>
              <p className="text-xs text-gray-500 mb-2">21 January 2023</p>
              <p className="text-xs text-gray-500 mb-2">Jakarta, Indonesia</p>
              <p className="text-primary-500 font-semibold">$23</p>
            </div>
          </div>

          {/* Event Card 2 */}
          <div className="bg-white rounded-lg overflow-hidden shadow">
            <div className="relative">
              <div className="aspect-[4/3] bg-gray-200"></div>
              <button className="absolute top-2 right-2 bg-white p-1 rounded-full">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
              </button>
              <div className="absolute top-2 left-2 bg-primary-100 p-1 rounded-full">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-primary-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                </svg>
              </div>
            </div>
            <div className="p-3">
              <h3 className="font-semibold text-sm mb-1">Concert Westlife</h3>
              <p className="text-xs text-gray-500 mb-2">21 February 2023</p>
              <p className="text-xs text-gray-500 mb-2">Jakarta, Indonesia</p>
              <p className="text-primary-500 font-semibold">$15</p>
            </div>
          </div>
        </div>
      </div>

      {/* Section Special Deal */}
      <div className="mt-6 px-4">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-bold">Special Deal</h2>
          <button className="text-sm text-primary-500">See More</button>
        </div>

        {/* Deal List */}
        <div className="space-y-4">
          {/* Deal Item 1 */}
          <div className="bg-white rounded-lg overflow-hidden shadow">
            <div className="flex">
              <div className="w-24 h-24 bg-gray-200 flex-shrink-0"></div>
              <div className="p-3 flex-1">
                <div className="text-xs text-gray-500">Food</div>
                <h3 className="font-semibold text-sm mb-1">Padang Food Festival</h3>
                <p className="text-xs text-gray-500 mb-2">21 January 2023</p>
                <p className="text-xs text-gray-500 mb-2">Jakarta, Indonesia</p>
              </div>
              <div className="p-3 flex flex-col items-end justify-between">
                <div className="line-through text-xs text-gray-500">$55</div>
                <div className="text-primary-500 font-semibold">$35</div>
              </div>
            </div>
          </div>

          {/* Deal Item 2 */}
          <div className="bg-white rounded-lg overflow-hidden shadow">
            <div className="flex">
              <div className="w-24 h-24 bg-gray-200 flex-shrink-0"></div>
              <div className="p-3 flex-1">
                <div className="text-xs text-gray-500">Music</div>
                <h3 className="font-semibold text-sm mb-1">Clouds Music Indofest</h3>
                <p className="text-xs text-gray-500 mb-2">21 January 2023</p>
                <p className="text-xs text-gray-500 mb-2">Jakarta, Indonesia</p>
              </div>
              <div className="p-3 flex flex-col items-end justify-between">
                <div className="line-through text-xs text-gray-500">$45</div>
                <div className="text-primary-500 font-semibold">$25</div>
              </div>
            </div>
          </div>

          {/* Deal Item 3 */}
          <div className="bg-white rounded-lg overflow-hidden shadow">
            <div className="flex">
              <div className="w-24 h-24 bg-gray-200 flex-shrink-0"></div>
              <div className="p-3 flex-1">
                <div className="text-xs text-gray-500">Sport</div>
                <h3 className="font-semibold text-sm mb-1">AFF CUP Competition</h3>
                <p className="text-xs text-gray-500 mb-2">21 January 2023</p>
                <p className="text-xs text-gray-500 mb-2">Jakarta, Indonesia</p>
              </div>
              <div className="p-3 flex flex-col items-end justify-between">
                <div className="line-through text-xs text-gray-500">$25</div>
                <div className="text-primary-500 font-semibold">$15</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Bar */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 py-2">
        <div className="flex justify-around items-center">
          <button className="flex flex-col items-center text-primary-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
            </svg>
            <span className="text-xs mt-1">Home</span>
          </button>
          
          <button className="flex flex-col items-center text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
            <span className="text-xs mt-1">Menu</span>
          </button>
          
          <button className="flex flex-col items-center text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 01.707-7.07m-.707 7.07l-1.414 1.414M7.05 4.05A9 9 0 0119.95 16.95M7.05 4.05l-1.414 1.414" />
            </svg>
            <span className="text-xs mt-1">Discover</span>
          </button>
          
          <button className="flex flex-col items-center text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
            <span className="text-xs mt-1">Profile</span>
          </button>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/events/EventCameraButton.tsx
================
"use client";

import React, { useState, useRef } from 'react';

interface EventCameraButtonProps {
  eventId: string;
}

const EventCameraButton: React.FC<EventCameraButtonProps> = ({ eventId }) => {
  const [showCamera, setShowCamera] = useState(false);
  const [capturedImage, setCapturedImage] = useState<string | null>(null);
  const [uploading, setUploading] = useState(false);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const mediaStreamRef = useRef<MediaStream | null>(null);

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      mediaStreamRef.current = stream;
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
      
      setShowCamera(true);
      setCapturedImage(null);
      setUploadSuccess(false);
    } catch (error) {
      console.error('Erreur lors de l\'acc√®s √† la cam√©ra:', error);
      alert('Impossible d\'acc√©der √† la cam√©ra. Veuillez v√©rifier vos permissions.');
    }
  };

  const captureImage = () => {
    if (videoRef.current && canvasRef.current) {
      const video = videoRef.current;
      const canvas = canvasRef.current;
      const context = canvas.getContext('2d');
      
      if (context) {
        // D√©finir les dimensions du canvas pour correspondre √† la vid√©o
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        
        // Dessiner l'image de la vid√©o sur le canvas
        context.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        // Convertir le canvas en une URL de donn√©es
        const imageDataUrl = canvas.toDataURL('image/jpeg');
        setCapturedImage(imageDataUrl);
      }
    }
  };

  const resetCamera = () => {
    setCapturedImage(null);
  };

  const closeCamera = () => {
    // Arr√™ter tous les flux de m√©dia
    if (mediaStreamRef.current) {
      mediaStreamRef.current.getTracks().forEach(track => track.stop());
      mediaStreamRef.current = null;
    }
    
    setShowCamera(false);
    setCapturedImage(null);
  };

  const uploadImage = async () => {
    if (!capturedImage) return;
    
    try {
      setUploading(true);
      
      // Ici, dans une impl√©mentation r√©elle, vous enverriez l'image √† votre serveur/Cloudinary
      // Pour cet exemple, simulons un d√©lai de chargement
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Simulation de succ√®s d'upload
      setUploadSuccess(true);
      setUploading(false);
      
      // Fermer le modal apr√®s un court d√©lai
      setTimeout(() => {
        closeCamera();
      }, 1500);
    } catch (error) {
      console.error('Erreur lors de l\'upload de l\'image:', error);
      setUploading(false);
      alert('Erreur lors de l\'envoi de l\'image. Veuillez r√©essayer.');
    }
  };
  
  return (
    <>
      <button
        onClick={startCamera}
        className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-event-primary hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
        Ajouter une photo
      </button>

      {/* Modal de cam√©ra */}
      {showCamera && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-75">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-lg w-full">
            <div className="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                {capturedImage ? 'Aper√ßu de la photo' : 'Prendre une photo'}
              </h3>
              <button 
                onClick={closeCamera}
                className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="p-4">
              {capturedImage ? (
                <div className="relative aspect-video overflow-hidden rounded-lg">
                  <img src={capturedImage} alt="Capture" className="w-full h-full object-cover" />
                </div>
              ) : (
                <div className="relative aspect-video overflow-hidden rounded-lg bg-gray-100 dark:bg-gray-700">
                  <video 
                    ref={videoRef} 
                    autoPlay 
                    playsInline 
                    className="w-full h-full object-cover"
                  />
                </div>
              )}
              
              {/* Canvas cach√© pour capturer l'image */}
              <canvas ref={canvasRef} className="hidden" />
            </div>
            
            <div className="p-4 border-t border-gray-200 dark:border-gray-700 flex justify-between">
              {capturedImage ? (
                <>
                  <button
                    onClick={resetCamera}
                    className="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
                    disabled={uploading}
                  >
                    Reprendre
                  </button>
                  <button
                    onClick={uploadImage}
                    className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-event-primary hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled={uploading || uploadSuccess}
                  >
                    {uploading ? (
                      <>
                        <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Envoi en cours...
                      </>
                    ) : uploadSuccess ? (
                      <>
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        Envoy√© !
                      </>
                    ) : (
                      <>
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                        </svg>
                        Envoyer
                      </>
                    )}
                  </button>
                </>
              ) : (
                <>
                  <button
                    onClick={closeCamera}
                    className="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
                  >
                    Annuler
                  </button>
                  <button
                    onClick={captureImage}
                    className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-event-primary hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    Prendre la photo
                  </button>
                </>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default EventCameraButton;

================
File: src/components/events/EventCard.tsx
================
// src/components/events/EventCard.tsx
"use client";

import React from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { motion } from 'framer-motion';

interface EventCardProps {
  id: string;
  name: string;
  description: string;
  picture?: string;
  startAt: Date;
  endAt: Date;
}

const EventCard: React.FC<EventCardProps> = ({
  id,
  name,
  description,
  picture = "/images/default-event.jpg",
  startAt,
  endAt,
}) => {
  // Formater les dates
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('fr-FR', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  // Limiter la longueur de la description
  const truncateDescription = (text: string, maxLength: number = 100) => {
    if (text.length <= maxLength) return text;
    return text.slice(0, maxLength) + '...';
  };

  return (
    <motion.div
      whileHover={{ y: -5, transition: { duration: 0.2 } }}
      className="rounded-card overflow-hidden bg-white dark:bg-gray-800 shadow-event-card"
    >
      <Link href={`/events/${id}`} className="block">
        <div className="relative h-48 w-full">
          <Image
            src={picture}
            alt={name}
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            className="object-cover"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
          <div className="absolute bottom-0 left-0 p-4 text-white">
            <span className="inline-block bg-event-primary px-2 py-1 text-xs font-semibold rounded-sm mb-2">
              {formatDate(startAt)}
            </span>
          </div>
        </div>
        
        <div className="p-4">
          <h3 className="font-heading font-bold text-lg text-gray-900 dark:text-white mb-2">{name}</h3>
          <p className="text-gray-600 dark:text-gray-300 text-sm mb-4">
            {truncateDescription(description)}
          </p>
          
          <div className="flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
            <span>Jusqu'au {formatDate(endAt)}</span>
            <span className="inline-flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
              </svg>
              Voir sur la carte
            </span>
          </div>
        </div>
      </Link>
    </motion.div>
  );
};

export default EventCard;

================
File: src/components/events/EventDetailContent.tsx
================
"use client";

import React from 'react';

interface EventData {
  id: string;
  name: string;
  description: string;
  picture: string;
  address: {
    type: string;
    coordinates: [number, number];
  };
  startAt: string;
  endAt: string;
  createdAt: string;
}

interface EventDetailContentProps {
  event: EventData;
}

const EventDetailContent: React.FC<EventDetailContentProps> = ({ event }) => {
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
      <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">√Ä propos de cet √©v√©nement</h2>
      <div className="prose prose-lg dark:prose-invert max-w-none">
        <p className="text-gray-700 dark:text-gray-300">
          {event.description}
        </p>
      </div>
      
      <div className="mt-6 flex flex-wrap gap-4">
        <button className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-event-primary hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          Ajouter au calendrier
        </button>
        
        <button className="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
          </svg>
          Partager
        </button>
      </div>
    </div>
  );
};

export default EventDetailContent;

================
File: src/components/events/EventDetailMap.tsx
================
// src/components/events/EventDetailMap.tsx
"use client";

import React, { useEffect, useRef } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

interface EventDetailMapProps {
  coordinates: [number, number]; // [longitude, latitude]
  eventName: string;
}

const EventDetailMap: React.FC<EventDetailMapProps> = ({ coordinates, eventName }) => {
  const mapRef = useRef<HTMLDivElement>(null);
  const [longitude, latitude] = coordinates;

  useEffect(() => {
    if (typeof window !== 'undefined' && mapRef.current) {
      // Initialise la carte avec Leaflet
      const map = L.map(mapRef.current).setView([latitude, longitude], 13);

      // Ajoute une couche de tuiles OpenStreetMap
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      // Ajoute un marqueur √† la position de l'√©v√©nement
      const marker = L.marker([latitude, longitude]).addTo(map);
      marker.bindPopup(`<b>${eventName}</b>`).openPopup();

      // Nettoyage √† la destruction du composant
      return () => {
        map.remove();
      };
    }
  }, [latitude, longitude, eventName]);

  return (
    <div ref={mapRef} className="h-full w-full rounded-lg" />
  );
};

export default EventDetailMap;

================
File: src/components/events/EventList.tsx
================
// src/components/events/EventList.tsx
"use client";

import React, { useState } from 'react';
import EventCard from './EventCard';
import { motion } from 'framer-motion';

export interface Event {
  id: string;
  name: string;
  description: string;
  picture?: string;
  address: string;
  startAt: Date;
  endAt: Date;
}

interface EventListProps {
  events: Event[];
  loading?: boolean;
}

const EventList: React.FC<EventListProps> = ({ events, loading = false }) => {
  const [filter, setFilter] = useState('all'); // 'all', 'upcoming', 'past'

  // Filtrer les √©v√©nements
  const filteredEvents = events.filter(event => {
    const now = new Date();
    if (filter === 'upcoming') {
      return new Date(event.startAt) > now;
    } else if (filter === 'past') {
      return new Date(event.endAt) < now;
    }
    return true;
  });

  // Animation des conteneurs
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { y: 20, opacity: 0 },
    show: { y: 0, opacity: 1 }
  };

  if (loading) {
    return (
      <div className="py-8 px-4 sm:px-6 lg:px-8">
        <div className="text-center">
          <svg className="animate-spin h-10 w-10 text-event-primary mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <p className="mt-4 text-gray-500 dark:text-gray-400">Chargement des √©v√©nements...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="py-6 px-4 sm:px-6 lg:px-8">
      <div className="mb-6 flex justify-between items-center">
        <h2 className="text-2xl font-heading font-bold text-gray-900 dark:text-white">√âv√©nements</h2>
        <div className="inline-flex rounded-md shadow-sm">
          <button
            type="button"
            onClick={() => setFilter('all')}
            className={`px-4 py-2 text-sm font-medium rounded-l-md ${
              filter === 'all' 
                ? 'bg-event-primary text-white' 
                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700'
            } border border-gray-300 dark:border-gray-600`}
          >
            Tous
          </button>
          <button
            type="button"
            onClick={() => setFilter('upcoming')}
            className={`px-4 py-2 text-sm font-medium ${
              filter === 'upcoming' 
                ? 'bg-event-primary text-white' 
                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700'
            } border-t border-b border-r border-gray-300 dark:border-gray-600`}
          >
            √Ä venir
          </button>
          <button
            type="button"
            onClick={() => setFilter('past')}
            className={`px-4 py-2 text-sm font-medium rounded-r-md ${
              filter === 'past' 
                ? 'bg-event-primary text-white' 
                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700'
            } border border-gray-300 dark:border-gray-600`}
          >
            Pass√©s
          </button>
        </div>
      </div>

      {filteredEvents.length === 0 ? (
        <div className="text-center py-12">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
          <h3 className="mt-4 text-lg font-medium text-gray-900 dark:text-white">Aucun √©v√©nement trouv√©</h3>
          <p className="mt-2 text-gray-500 dark:text-gray-400">
            {filter === 'upcoming' ? "Il n'y a pas d'√©v√©nements √† venir pour le moment." : 
             filter === 'past' ? "Il n'y a pas d'√©v√©nements pass√©s." : 
             "Aucun √©v√©nement n'est disponible."}
          </p>
        </div>
      ) : (
        <motion.div 
          variants={container}
          initial="hidden"
          animate="show"
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6"
        >
          {filteredEvents.map((event) => (
            <motion.div key={event.id} variants={item}>
              <EventCard
                id={event.id}
                name={event.name}
                description={event.description}
                picture={event.picture}
                startAt={new Date(event.startAt)}
                endAt={new Date(event.endAt)}
              />
            </motion.div>
          ))}
        </motion.div>
      )}
    </div>
  );
};

export default EventList;

================
File: src/components/events/EventPhotosGallery.tsx
================
// src/components/events/EventPhotosGallery.tsx
"use client";

import React from 'react';
import Image from 'next/image';

interface Photo {
  id: string;
  url: string;
  uploadedAt: string;
}

interface EventPhotosGalleryProps {
  photos: Photo[];
}

const EventPhotosGallery: React.FC<EventPhotosGalleryProps> = ({ photos }) => {
  const [selectedPhoto, setSelectedPhoto] = React.useState<Photo | null>(null);

  if (photos.length === 0) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 text-center">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
        <p className="mt-4 text-gray-500 dark:text-gray-400">
          Aucune photo n&apos;a encore √©t√© ajout√©e pour cet √©v√©nement.
        </p>
        <p className="mt-2 text-gray-500 dark:text-gray-400">
          Soyez le premier √† capturer un moment !
        </p>
      </div>
    );
  }

  return (
    <div>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
        {photos.map((photo) => (
          <div 
            key={photo.id} 
            className="aspect-square relative rounded-lg overflow-hidden cursor-pointer"
            onClick={() => setSelectedPhoto(photo)}
          >
            <Image
              src={photo.url}
              alt={`Photo de l'√©v√©nement ${photo.id}`}
              fill
              sizes="(max-width: 768px) 50vw, (max-width: 1200px) 33vw, 25vw"
              className="object-cover hover:scale-105 transition-transform duration-300"
            />
          </div>
        ))}
      </div>

      {/* Modal pour afficher une photo en grand format */}
      {selectedPhoto && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-80" onClick={() => setSelectedPhoto(null)}>
          <div className="relative max-w-4xl max-h-full" onClick={(e) => e.stopPropagation()}>
            <button 
              className="absolute top-4 right-4 z-10 bg-white/10 backdrop-blur-sm rounded-full p-2"
              onClick={() => setSelectedPhoto(null)}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            <div className="relative aspect-video w-full h-full">
              <Image
                src={selectedPhoto.url}
                alt={`Photo de l'√©v√©nement ${selectedPhoto.id}`}
                fill
                sizes="100vw"
                className="object-contain"
              />
            </div>
            <div className="absolute bottom-0 left-0 right-0 bg-black/50 backdrop-blur-sm text-white p-4">
              <p className="text-sm">
                Ajout√©e le {new Date(selectedPhoto.uploadedAt).toLocaleDateString('fr-FR', {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EventPhotosGallery;

================
File: src/components/events/EventQRCode.tsx
================
// src/components/events/EventQRCode.tsx
"use client";

import React, { useEffect, useState } from 'react';
import Image from 'next/image';

interface EventQRCodeProps {
  eventId: string;
  eventName: string;
}

const EventQRCode: React.FC<EventQRCodeProps> = ({ eventId, eventName }) => {
  const [qrUrl, setQrUrl] = useState<string>('');

  useEffect(() => {
    // En production, vous utiliseriez l'API QRCode pour g√©n√©rer le code
    // Pour l'instant, simulons un d√©lai et utilisons une image statique
    const timer = setTimeout(() => {
      // URL simul√©e - dans une impl√©mentation r√©elle, cela serait g√©n√©r√© c√¥t√© serveur
      setQrUrl(`https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=https://eventrue.com/events/${eventId}`);
    }, 500);

    return () => clearTimeout(timer);
  }, [eventId]);

  if (!qrUrl) {
    return (
      <div className="w-64 h-64 bg-gray-200 dark:bg-gray-700 animate-pulse rounded-lg"></div>
    );
  }

  return (
    <div className="text-center">
      <div className="p-4 bg-white rounded-lg inline-block">
        <Image 
          src={qrUrl}
          alt={`QR Code pour l'√©v√©nement ${eventName}`}
          width={200}
          height={200}
          className="mx-auto"
        />
      </div>
    </div>
  );
};

export default EventQRCode;

================
File: src/components/layout/PageLayout.tsx
================
import React from 'react';
import Navbar from '../Navbar';

interface PageLayoutProps {
  children: React.ReactNode;
  title?: string;
  showBackButton?: boolean;
  showNavbar?: boolean;
  className?: string;
}

const PageLayout: React.FC<PageLayoutProps> = ({
  children,
  title,
  showBackButton = false,
  showNavbar = true,
  className = "",
}) => {
  return (
    <div className="min-h-screen flex flex-col bg-gray-50 dark:bg-gray-900">
      {showNavbar && <Navbar title={title} showBackButton={showBackButton} />}
      
      <main className={`flex-grow pt-16 ${className}`}>
        {children}
      </main>
      
      <footer className="bg-white dark:bg-gray-900 shadow-md py-4 px-4 text-center text-sm text-gray-600 dark:text-gray-400">
        <p>¬© {new Date().getFullYear()} Eventrue - Tous droits r√©serv√©s</p>
      </footer>
    </div>
  );
};

export default PageLayout;

================
File: src/components/Navbar.tsx
================
"use client";

import React, { useState } from 'react';
import Link from 'next/link';
import { motion } from 'framer-motion';

interface NavbarProps {
  title?: string;
  showBackButton?: boolean;
}

const Navbar: React.FC<NavbarProps> = ({ 
  title = "Eventrue", 
  showBackButton = false 
}) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  return (
    <nav className="fixed top-0 left-0 right-0 bg-white dark:bg-gray-900 shadow-navbar z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          {/* Logo et titre */}
          <div className="flex items-center">
            {showBackButton && (
              <button 
                onClick={() => window.history.back()}
                className="mr-2 p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
                </svg>
              </button>
            )}
            <Link href="/" className="flex items-center">
              <span className="text-event-primary font-heading font-bold text-xl">
                {title}
              </span>
            </Link>
          </div>

          {/* Menu mobile */}
          <div className="md:hidden">
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="p-2 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none"
            >
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="h-6 w-6" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                {isMenuOpen ? (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                )}
              </svg>
            </button>
          </div>

          {/* Navigation desktop */}
          <div className="hidden md:block">
            <div className="ml-10 flex items-baseline space-x-4">
              <Link href="/events" className="px-3 py-2 rounded-md text-sm font-medium text-gray-700 dark:text-gray-200 hover:text-primary-500 dark:hover:text-primary-400 hover:bg-gray-100 dark:hover:bg-gray-800">
                √âv√©nements
              </Link>
              <Link href="/about" className="px-3 py-2 rounded-md text-sm font-medium text-gray-700 dark:text-gray-200 hover:text-primary-500 dark:hover:text-primary-400 hover:bg-gray-100 dark:hover:bg-gray-800">
                √Ä propos
              </Link>
            </div>
          </div>
        </div>
      </div>

      {/* Menu mobile d√©roulant */}
      {isMenuOpen && (
        <motion.div 
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
          className="md:hidden"
        >
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white dark:bg-gray-900 shadow-md">
            <Link href="/events" className="block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-200 hover:text-primary-500 dark:hover:text-primary-400 hover:bg-gray-100 dark:hover:bg-gray-800">
              √âv√©nements
            </Link>
            <Link href="/about" className="block px-3 py-2 rounded-md text-base font-medium text-gray-700 dark:text-gray-200 hover:text-primary-500 dark:hover:text-primary-400 hover:bg-gray-100 dark:hover:bg-gray-800">
              √Ä propos
            </Link>
          </div>
        </motion.div>
      )}
    </nav>
  );
};

export default Navbar;

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: db-connect.sh
================
#!/bin/bash

# Simple Neon PostgreSQL Connection Check
echo "üîç Checking Neon PostgreSQL connection..."

# Check if DATABASE_URL is set
if [ -z "$DATABASE_URL" ]; then
  echo "‚ùå DATABASE_URL is not set"
  exit 1
fi

# Try a basic connection - this will fail fast if there's a problem
echo "Attempting connection to Neon PostgreSQL..."
node -e "
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testConnection() {
  try {
    console.log('Connecting to database...');
    await prisma.$connect();
    console.log('‚úÖ Database connection successful!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Database connection failed:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

testConnection();
"

================
File: docker-compose.yml
================
# docker-compose.yml
version: "3.8"

services:
  dev-db:
    image: postgres:13
    environment:
      POSTGRES_DB: crwod-gather
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - dev-db-data:/var/lib/postgresql/data

  dev-app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - DATABASE_URL=postgresql://dev_user:dev_password@dev-db:5432/eventrue_dev
      - NEXT_PUBLIC_API_URL=http://localhost:3000/api
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    depends_on:
      - dev-db

  prod-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - default
      - external_network

  cloudinary-proxy:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    environment:
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}

networks:
  external_network:
    driver: bridge
volumes:
  dev-db-data:

================
File: Dockerfile.dev
================
# Dockerfile.dev
FROM node:18-alpine AS dev-base
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies
COPY package.json package-lock.json* ./
RUN npm ci

# Development Dockerfile
FROM dev-base AS development
ENV NODE_ENV=development

# Copy project files
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Expose port and start development server
EXPOSE 3000
CMD ["npm", "run", "dev"]

================
File: Dockerfile.prod
================
# Dockerfile.prod
FROM node:18-alpine AS prod-base

# Install system dependencies
RUN apk add --no-cache libc6-compat openssl

WORKDIR /app

# Install dependencies
COPY package.json package-lock.json* ./
RUN npm ci 

# Build stage
FROM prod-base AS builder
ENV NODE_ENV=production

# Copy project files
COPY . .

# Generate Prisma client and ensure SSL certificates are handled
RUN npx prisma generate

# Verify SSL certificates if needed
RUN if [ -f "./certs/custom-ca.pem" ]; then \
    export NODE_EXTRA_CA_CERTS=/app/certs/custom-ca.pem; \
    fi

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production
WORKDIR /app

# Set production environment
ENV NODE_ENV=production

# Install system dependencies for SSL
RUN apk add --no-cache libc6-compat openssl ca-certificates

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/prisma ./prisma

# Optional: Copy custom CA certificates if needed
# COPY ./certs/custom-ca.pem /etc/ssl/certs/custom-ca.pem

# Set user permissions
USER nextjs

# Expose port
EXPOSE 3000

# Start the application
CMD ["node", "server.js"]

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: Makefile
================
# Makefile for Eventrue Application

# Project Variables
PROJECT_NAME = eventrue
DOCKER_COMPOSE = docker-compose
DOCKER = docker

# Development Environment Commands
.PHONY: dev-up
dev-up:
	@echo "Starting development environment..."
	$(DOCKER_COMPOSE) -f docker-compose.yml up dev-db dev-app -d
	@echo "Development environment is up and running!"

.PHONY: dev-down
dev-down:
	@echo "Stopping development environment..."
	$(DOCKER_COMPOSE) -f docker-compose.yml down dev-db dev-app
	@echo "Development environment stopped."

.PHONY: dev-logs
dev-logs:
	$(DOCKER_COMPOSE) -f docker-compose.yml logs -f dev-app

.PHONY: dev-rebuild
dev-rebuild:
	@echo "Rebuilding development environment..."
	$(DOCKER_COMPOSE) -f docker-compose.yml build dev-app
	$(DOCKER_COMPOSE) -f docker-compose.yml up dev-app -d
	@echo "Development environment rebuilt!"

# Production Environment Commands
.PHONY: prod-up
prod-up:
	@echo "Starting production environment..."
	$(DOCKER_COMPOSE) -f docker-compose.yml up prod-app -d
	@echo "Production environment is up and running!"

.PHONY: prod-down
prod-down:
	@echo "Stopping production environment..."
	$(DOCKER_COMPOSE) -f docker-compose.yml down prod-db prod-app
	@echo "Production environment stopped."

.PHONY: prod-logs
prod-logs:
	$(DOCKER_COMPOSE) -f docker-compose.yml logs -f prod-app

.PHONY: prod-rebuild
prod-rebuild:
	@echo "Rebuilding production environment..."
	$(DOCKER_COMPOSE) -f docker-compose.yml build prod-app
	$(DOCKER_COMPOSE) -f docker-compose.yml up prod-app -d
	@echo "Production environment rebuilt!"

# Database Migrations
.PHONY: migrate-dev
migrate-dev:
	@echo "Running database migrations for development..."
	$(DOCKER_COMPOSE) -f docker-compose.yml run --rm dev-app npx prisma migrate dev

.PHONY: migrate-prod
migrate-prod:
	@echo "Running database migrations for production..."
	$(DOCKER_COMPOSE) -f docker-compose.yml run --rm prod-app npx prisma migrate deploy

# Database Seeds
.PHONY: seed-dev
seed-dev:
	@echo "Seeding development database..."
	$(DOCKER_COMPOSE) -f docker-compose.yml run --rm dev-app npx prisma db seed

.PHONY: seed-prod
seed-prod:
	@echo "Seeding production database..."
	$(DOCKER_COMPOSE) -f docker-compose.yml run --rm prod-app npx prisma db seed

# Clean Up
.PHONY: clean
clean:
	@echo "Cleaning up Docker resources..."
	$(DOCKER) system prune -f
	$(DOCKER) volume prune -f
	@echo "Docker resources cleaned!"

# Environment Checks
.PHONY: check-env
check-env:
	@echo "Checking environment variables..."
	@if [ -z "$(CLOUDINARY_CLOUD_NAME)" ]; then \
		echo "Error: CLOUDINARY_CLOUD_NAME is not set"; exit 1; \
	fi
	@if [ -z "$(CLOUDINARY_API_KEY)" ]; then \
		echo "Error: CLOUDINARY_API_KEY is not set"; exit 1; \
	fi
	@if [ -z "$(CLOUDINARY_API_SECRET)" ]; then \
		echo "Error: CLOUDINARY_API_SECRET is not set"; exit 1; \
	fi
	@echo "All required environment variables are set!"

# Full Setup
.PHONY: setup-dev
setup-dev: check-env dev-up migrate-dev seed-dev
	@echo "Development environment fully set up!"

.PHONY: setup-prod
setup-prod: check-env prod-up migrate-prod seed-prod
	@echo "Production environment fully set up!"

.PHONY: test-db
test-db:
	@echo "Testing database connection..."
  	$(DOCKER_COMPOSE) -f docker-compose.yml run --rm prod-app sh -c "node -e \"const { PrismaClient } = require('@prisma/client'); const prisma = new PrismaClient(); async function main() { try { await prisma.$connect(); console.log('Database connection successful!'); } catch (e) { console.error('Database connection failed:', e); process.exit(1); } finally { await prisma.$disconnect(); } } main();\""

# Help
.PHONY: help
help:
	@echo "Eventrue Docker Management"
	@echo ""
	@echo "Development Commands:"
	@echo "  make dev-up       - Start development environment"
	@echo "  make dev-down     - Stop development environment"
	@echo "  make dev-logs     - View development logs"
	@echo "  make dev-rebuild  - Rebuild development environment"
	@echo ""
	@echo "Production Commands:"
	@echo "  make prod-up      - Start production environment"
	@echo "  make prod-down    - Stop production environment"
	@echo "  make prod-logs    - View production logs"
	@echo "  make prod-rebuild - Rebuild production environment"
	@echo ""
	@echo "Database Commands:"
	@echo "  make migrate-dev  - Run database migrations for development"
	@echo "  make migrate-prod - Run database migrations for production"
	@echo "  make seed-dev     - Seed development database"
	@echo "  make seed-prod    - Seed production database"
	@echo ""
	@echo "Utility Commands:"
	@echo "  make clean        - Clean up Docker resources"
	@echo "  make check-env    - Check required environment variables"
	@echo "  make setup-dev    - Full development environment setup"
	@echo "  make setup-prod   - Full production environment setup"
	@echo "  make test-db      - Test database connection"
	@echo "  make help         - Show this help message"

# Default target
.DEFAULT_GOAL := help

================
File: next.config.ts
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: "standalone",
  reactStrictMode: true,

  env: {
    DATABASE_URL: process.env.DATABASE_URL,
    CLOUDINARY_CLOUD_NAME: process.env.CLOUDINARY_CLOUD_NAME,
  },

  poweredByHeader: false,

  images: {
    domains: ["res.cloudinary.com", "cloudinary.com"],
  },
};

module.exports = nextConfig;

================
File: package.json
================
{
  "name": "crowd-gather",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroui/react": "^2.7.4",
    "@heroui/theme": "^2.4.11",
    "@prisma/client": "^6.4.1",
    "@types/leaflet": "^1.9.16",
    "axios": "^1.8.1",
    "cloudinary": "^2.5.1",
    "framer-motion": "^12.4.10",
    "leaflet": "^1.9.4",
    "multer": "^1.4.5-lts.1",
    "next": "15.2.0",
    "qrcode": "^1.5.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.20",
    "eslint": "^9",
    "eslint-config-next": "15.2.0",
    "postcss": "^8.5.3",
    "prisma": "^6.4.1",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Eventrue - Public Event Photo Sharing Platform

## üöÄ Project Overview

Eventrue is a mobile-first web application designed to enhance public event experiences by allowing users to browse events, take photos, and share memories.

## üìã Prerequisites

- Docker
- Docker Compose
- Make
- Node.js (v18+)
- Cloudinary Account
- PostgreSQL (optional, for local development)

## üîß Environment Setup

### 1. Clone the Repository
```bash
git clone https://github.com/yourusername/eventrue.git
cd eventrue
```

### 2. Configure Environment Variables
Create a `.env` file in the project root with the following variables:
```
# Cloudinary Credentials
CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# Database URLs
DATABASE_URL_DEV=postgresql://dev_user:dev_password@localhost:5432/eventrue_dev
DATABASE_URL_PROD=postgresql://prod_user:prod_password@localhost:5432/eventrue_prod
```

### 3. Development Environment

#### Quick Start
```bash
# Check environment variables
make check-env

# Set up and start development environment
make setup-dev
```

#### Individual Development Commands
```bash
# Start development services
make dev-up

# Stop development services
make dev-down

# View development logs
make dev-logs

# Rebuild development environment
make dev-rebuild

# Run database migrations
make migrate-dev

# Seed development database
make seed-dev
```

### 4. Production Environment

#### Quick Start
```bash
# Check environment variables
make check-env

# Set up and start production environment
make setup-prod
```

#### Individual Production Commands
```bash
# Start production services
make prod-up

# Stop production services
make prod-down

# View production logs
make prod-logs

# Rebuild production environment
make prod-rebuild

# Run database migrations
make migrate-prod

# Seed production database
make seed-prod
```

## üõ†Ô∏è Project Structure

```
eventrue/
‚îú‚îÄ‚îÄ prisma/             # Database schema and migrations
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ app/            # Next.js app router
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api/        # API route handlers
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ events/     # Event-related pages
‚îÇ   ‚îú‚îÄ‚îÄ components/     # Reusable React components
‚îÇ   ‚îî‚îÄ‚îÄ styles/         # CSS and styling
‚îú‚îÄ‚îÄ Dockerfile.dev      # Development Dockerfile
‚îú‚îÄ‚îÄ Dockerfile.prod     # Production Dockerfile
‚îú‚îÄ‚îÄ docker-compose.yml  # Docker Compose configuration
‚îú‚îÄ‚îÄ Makefile            # Development and deployment commands
‚îî‚îÄ‚îÄ README.md           # Project documentation
```

## üåü Key Features

- Mobile-first event browsing
- Real-time photo capture
- Cloud image storage
- Interactive event maps
- QR Code event sharing

## üîç Troubleshooting

- Ensure all environment variables are set
- Check Docker and Docker Compose versions
- Verify Cloudinary credentials

## üìÑ License

[Your License Here]

## ü§ù Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## üìû Support

For issues and questions, please open a GitHub issue or contact support@eventrue.com

================
File: tailwind.config.js
================
import { heroui } from "@heroui/react";

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,ts,jsx,tsx}",
    "./node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {
      colors: {
        political: {
          red: "#E53935",     // Rouge pour symboliser les partis de gauche
          blue: "#1565C0",    // Bleu pour symboliser les partis de droite
          green: "#2E7D32"    // Vert pour les partis √©cologistes
        },
        primary: {
          50: "#e3f2fd",
          100: "#bbdefb",
          200: "#90caf9",
          300: "#64b5f6",
          400: "#42a5f5",
          500: "#1976D2", // Couleur principale - bleu politique standard
          600: "#1565C0",
          700: "#0d47a1",
          800: "#0a3880",
          900: "#072a60",
          DEFAULT: "#1976D2",
          foreground: "#ffffff"
        },
        secondary: {
          50: "#ffebee",
          100: "#ffcdd2",
          200: "#ef9a9a",
          300: "#e57373",
          400: "#ef5350",
          500: "#D32F2F", // Rouge politique
          600: "#c62828",
          700: "#b71c1c",
          800: "#8e1515",
          900: "#5e0e0e",
          DEFAULT: "#D32F2F",
          foreground: "#ffffff"
        }
      },
      fontFamily: {
        sans: ['var(--font-geist-sans)', 'sans-serif']
      },
      boxShadow: {
        'event-card': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'
      }
    },
  },
  darkMode: "class",
  plugins: [
    heroui({
      themes: {
        "crowd-gather-theme": {
          extend: "light",
          colors: {
            background: "#f8f9fa",
            foreground: "#212121",
            primary: {
              50: "#e3f2fd",
              100: "#bbdefb",
              200: "#90caf9",
              300: "#64b5f6",
              400: "#42a5f5",
              500: "#1976D2", // Bleu politique
              600: "#1565C0",
              700: "#0d47a1",
              800: "#0a3880",
              900: "#072a60",
              DEFAULT: "#1976D2",
              foreground: "#ffffff"
            },
            secondary: {
              50: "#ffebee",
              100: "#ffcdd2",
              200: "#ef9a9a",
              300: "#e57373",
              400: "#ef5350",
              500: "#D32F2F", // Rouge politique
              600: "#c62828",
              700: "#b71c1c",
              800: "#8e1515",
              900: "#5e0e0e",
              DEFAULT: "#D32F2F",
              foreground: "#ffffff"
            },
            focus: "#1565C0"
          },
          layout: {
            disabledOpacity: "0.3",
            radius: {
              small: "4px",
              medium: "6px",
              large: "8px"
            },
            borderWidth: {
              small: "1px",
              medium: "2px",
              large: "3px"
            }
          }
        }
      }
    })
  ]
};

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
